
### AUthor: Dustin Hu
### DAte: 02-06-2014
### Purpose: To contain the Hand class, which depends upon the Domino class, which in turn, depends upon the Dice class

import domino

class Hand(object):
    ### Author: Dustin Hu
    ### Date: 02-06-2014
    ### Purpose: To be the class for the hand object, which is the remainder of teh game

    ### Fields:
    ####### dominoes: THe dominoes of the hand
    ####### size: The size of the dominoes to be drawn
    
    ### Methods:
    ####### __getitem__: Allows for indexing of the hand to access dominoes
    ####### __str__: Returns a string of a the list of domiones
    ####### sortHigh: sorts the dominoes from highest to lowest
    ####### dropDomino: Removes a domino with the given value from the hand.///
    ####### findValue: Returns the index of a give value in teh hand 
    ####### displayHand: Draws the hand on a canvas
    ####### addDomino: Adds a domino to the hand
    ####### getHandSize: Returns the length of the hand
    ####### valueOfDomino: Returns the value of the domino at the ith position 
    ####### __init__: The initnaliziation method of this hand

    def __getitem__(self, i):
        ### AUthor: DUstin Hu
        ### DAte: 07-06-2014
        ### Purpose: TO allow for indexing of the dominoes by indexing the hand, i.e, say hand.dominoes = [04, 55, 66], you cand do hand[0] to get 04.
        ### Input: Integer i to find at
        ### Output: VAlue of dominoes at i.
        return self.dominoes[i]

    def __str__(self):
        ### Author: Dustin Hu
        ### Date: 02-06-2014
        ### Purpose: To return a string of the list of dominose
        ### Input: None
        ### Output: A string containing the list of dominoes

        return str(self.dominoes)


    def sortHigh(self):
        ### AUthor: Dustin Hu
        ### Date: 02-06-2014
        ### Purpsoe: To sort the dominoes from lowest to highest
        ### Input: None
        ### Output: None
        self.dominoes = sorted(self.dominoes, key = lambda domino: int(domino.value))

    def dropDomino(self, value):
        ### Author: Dustin Hu
        ### DAte: 02-06-2014
        ### Purpose: To drop a domino from the hand
        ### Input: A value between 0 and 66 with neither digit being greater than 66
        ### OUtput: None
        if value in self.dominoes
            # b = domino.Domino()
            # b.setValue(value)
            self.dominoes.remove(value)
#            del self.dominoes[self.findValue(value)]

    def findValue(self, x):
        ### AUthor: DUstin hu
        ### DAte: 02-06-2014
        ### Purpsoe: To find the index of the hand
        ### Input: THe value of which to find the index
        ### Output: The index at which it is at, lest it not be found, in which case, return -1
        value = [int(i.returnValue())for i in self.dominoes]
        if x in value:
            a = value.index(x, 0)
        else:
            a = -1
        return a



    def displayHand(self, x, y , canvas,orientation = "V", faceup = True):
        ### Author: Dustin Hu
        ### Date: 02-06-2014
        ### Purpose: To display the hand onto a canvas
        ### Input: A x and a y, the top left corner of the hand, orientatoin which is either "V" or "H"
#        print self.dominoes

        if orientation == "V":
            for i in xrange(0, len(self.dominoes)):
                self.dominoes[i].displayValue(canvas, x = x, y = ( i + 1) * 2 * (self.size + 10), orientation = "V")
            
                            
            # i = 1
            # self.dominoes[0].displayValue(canvas, x = x, y = i * 2 * (self.size + 10), orientation = "V")
            # i = 2
#            self.dominoes[1].displayValue(canvas, x = x, y = i * 2 * (self.size  + 10), orientation = "V")

            # i = 1
            # while i <= self.getHandSize():
            #     self.dominoes[i-1].displayValue(canvas, x = x, y = i * 2 * (self.size + 10), orientation = "V")
            #     i = i + 1

        else:
            for i in xrange(0, len(self.dominoes)):
                self.dominoes[i].displayValue(canvas, x = (i + 1) * 2 * (self.size + 10), y = y, orientation = "H")

            # i = 1
            # while i <= self.getHandSize(): 
            #     self.dominoes[i - 1].displayValue(canvas, x = i * 2 * (self.size + 10), y = y, orientation = "H")
            #     i = i + 1


        # if orientation == "V":
        #     i = 1
        #     for domino in self.dominoes:
        #         domino.displayValue(canvas, x = x, y = i * 2 * (self.size + 10), orientation = "V")
        #         i = i + 1
        # else:
        #     i = 1
        #     for domino in self.dominoes:
        #         domino.displayValue(canvas, x = i * 2 * (self.size + 10), y = y, orientation = "H")
        #         i = i + 1
        # i = 1
        # if orientation == "V":
        #     for domino in self.dominoes:
        #         if i <= self.getHandSize():
        #             domino.displayValue(canvas, x = x, y = i * 2 * (self.size + 10), orientation = "V")
        #             i = i + 1
        #         print domino
                
        #     # for i in xrange(1, self.getHandSize() + 1):
        #     #     self.dominoes[i-1].displayValue(canvas, x = x, y = i * 2 * (self.size + 10), orientation = "V")

        # else:
        #     for domino in self.dominoes:
        #         if i <= self.getHandSize():
        #             domino.displayValue(canvas, x = i * 2 * (self.size + 10) , y = y , orientation = "H")
        #             i = i + 1
        #         print domino

            # for i in xrange(1, self.getHandSize() + 1):
            #     self.dominoes[i-1].displayValue(canvas, x = i * 2 * (self.size + 10) , y = y , orientation = "H")

#         for i in xrange(1, self.getHandSize() + 1):
#             self.dominoes[i].displayValue(canvas, i * 2 * x, y * b2
# #            self.dominoes[i].displayValue(canvas, x * (i + 2), y * (i + 2), orientation = orientation, faceup = faceup)


    def addDomino(self, domino):
        ### AUthor: Dustin Hu
        ### Date: 02-06-2014
        ### Purpose: To add a domino to the hand
        ### Input: A domino to add to the list
        ### Output: Nothing
        self.dominoes.append(domino)

    def getHandSize(self):
        ### AUthor: Dustin Hu
        ### Date: 02-06-2014
        ### Purpose: To return the hand's size
        ### Input: None
        ### Output: The size of the hand
        return len(self.dominoes)


    def valueOfDomino(self, i):
        ### Author: dustin Hu
        ### Date: 02-06-2014
        ### Purpose: To return the ith domino's value.
        ### Input: i, the value to look at
        ### Output: The value of the domino at i.
        return self.dominoes[i].returnValue()
        
    def __init__(self, lstDominoes, size = 30):
        ### AUthor: Dustin Hu
        ### Date: 02-06-2014
        ### Purpose: AN initalization procuderu, will initalize the hand 
        ### Input: A list of the dominoes to be in the hand, and the sizeto draw at.
        ### OUtput: None
        self.dominoes = lstDominoes
        if size >= 30 and size <= 100:
            self.size = size
        else:
            self.size = 30
        

    
